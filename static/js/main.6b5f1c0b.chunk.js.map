{"version":3,"sources":["SearchWorker.js","App.js","registerServiceWorker.js","index.js"],"names":["code","glycemicIndex","foods","self","onmessage","data","query","setGlycemicIndex","Object","keys","sort","a","b","length","trim","toLowerCase","results","filter","food","includes","map","title","gi","postMessage","slice","concat","more","toString","substring","indexOf","lastIndexOf","blob","Blob","type","workerScript","URL","createObjectURL","module","exports","worker","Worker","getColorOrTextForGI","isText","getColorOrTextForGL","gl","App","props","handleServingSizeChange","e","value","setState","serving","unitChange","unit","handleResultSelect","result","document","getElementById","focus","handleSearchInputChange","isLoading","handleSearchDone","componentDidMount","getSearchInput","Search","id","placeholder","loading","state","onResultSelect","onSearchChange","fluid","resultRenderer","style","color","Label","size","getServingSizeInput","marginTop","Input","width","min","label","Dropdown","borderTopRightRadius","borderBottomRightRadius","defaultValue","options","key","text","onChange","labelPosition","getCarbsResults","carbsRatio","Number","isInteger","horizontal","href","target","rel","Icon","name","Math","round","getGLResult","servingFactor","g","oz","pointing","getGIResult","getFooter","position","left","bottom","backgroundColor","textAlign","fontSize","giValue","this","carbs_per_100g","margin","Divider","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6b5f1c0b.chunk.js","sourcesContent":["const workercode = () => {\n  let glycemicIndex;\n  let foods;\n\n  //eslint-disable-next-line\n  self.onmessage = ({ data: { query, setGlycemicIndex } }) => {\n    if (setGlycemicIndex) {\n      glycemicIndex = setGlycemicIndex;\n      foods = Object.keys(glycemicIndex).sort((a, b) => a.length - b.length);\n      return;\n    }\n    if (query && glycemicIndex && foods) {\n      query = query.trim().toLowerCase();\n\n      const results = foods\n        .filter(food => food.toLowerCase().includes(query))\n        .map(food => ({ title: food, gi: glycemicIndex[food].gi }));\n\n      const maxResults = 25;\n      if (results.length > maxResults) {\n        //eslint-disable-next-line\n        self.postMessage({\n          results: results.slice(0, maxResults).concat({\n            title: \"Too many results.\",\n            more: results.length - maxResults\n          })\n        });\n      } else {\n        //eslint-disable-next-line\n        self.postMessage({ results });\n      }\n      return;\n    }\n  };\n};\n\nlet code = workercode.toString();\ncode = code.substring(code.indexOf(\"{\") + 1, code.lastIndexOf(\"}\"));\n\nconst blob = new Blob([code], { type: \"application/javascript\" });\nconst workerScript = URL.createObjectURL(blob);\n\nmodule.exports = workerScript;\n","import React, { Component } from \"react\";\nimport {\n  Dropdown,\n  Icon,\n  Input,\n  Label,\n  Divider,\n  Search\n} from \"semantic-ui-react\";\nimport PropTypes from \"prop-types\";\nimport workerScript from \"./SearchWorker.js\";\nimport glycemicIndex from \"./gi.json\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./App.css\";\n\n// const foods = Object.keys(glycemicIndex).sort();\nconst worker = new Worker(workerScript);\nworker.postMessage({ setGlycemicIndex: glycemicIndex });\n\nfunction getColorOrTextForGI(gi, isText) {\n  // Low: 55 or less\n  // Medium: 56 - 69\n  // High: 70 or more\n\n  if (gi <= 55) {\n    return isText ? \"Low\" : \"green\";\n  }\n  if (gi > 55 && gi < 70) {\n    return isText ? \"Medium\" : \"orange\";\n  }\n  if (gi >= 70) {\n    return isText ? \"High\" : \"red\";\n  }\n}\n\nfunction getColorOrTextForGL(gl, isText) {\n  // Low: 10 or less\n  // Medium: 11-19\n  // High: 20 or more\n\n  if (gl <= 10) {\n    return isText ? \"Low\" : \"green\";\n  }\n  if (gl > 10 && gl < 20) {\n    return isText ? \"Medium\" : \"orange\";\n  }\n  if (gl >= 20) {\n    return isText ? \"High\" : \"red\";\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      food: \"\",\n      serving: 100,\n      unit: \"g\",\n      isLoading: false,\n      results: []\n    };\n\n    worker.onmessage = this.handleSearchDone;\n  }\n\n  handleServingSizeChange = (e, { value }) => this.setState({ serving: value });\n\n  unitChange = (e, { value }) => this.setState({ unit: value });\n\n  handleResultSelect = (e, { result }) => {\n    if (result.more) {\n      document.getElementById(\"searchBar\").focus();\n      return;\n    }\n\n    this.setState({ food: result.title });\n\n    worker.postMessage({ query: result.title });\n  };\n\n  handleSearchInputChange = (e, { value }) => {\n    if (!value) {\n      this.setState({ isLoading: false, food: \"\" });\n      return;\n    }\n    this.setState({ isLoading: true, food: value });\n\n    worker.postMessage({ query: value });\n  };\n\n  handleSearchDone = ({ data: { results } }) => {\n    this.setState({\n      isLoading: false,\n      results: results\n    });\n  };\n\n  componentDidMount = () => {\n    document.getElementById(\"searchBar\").focus();\n  };\n\n  render() {\n    let giValue, carbsRatio;\n    if (glycemicIndex[this.state.food]) {\n      giValue = +glycemicIndex[this.state.food].gi;\n      carbsRatio = +glycemicIndex[this.state.food].carbs_per_100g / 100;\n    }\n\n    return (\n      <div style={{ margin: 20 }}>\n        <h1>Glycemic Load Calculator</h1>\n        <Divider />\n        {this.getSearchInput()}\n        {this.getServingSizeInput()}\n        <Divider />\n        {this.getCarbsResults(giValue, carbsRatio)}\n        {this.getGIResult(giValue)}\n        {this.getGLResult(carbsRatio, giValue)}\n        {this.getFooter()}\n      </div>\n    );\n  }\n\n  getSearchInput = () => {\n    const resultRenderer = result => {\n      if (result.more) {\n        return (\n          <b style={{ color: \"red\" }}>\n            {result.more} more results. Please refine your search.\n          </b>\n        );\n      }\n      return (\n        <div>\n          <b>{result.title}</b>{\" \"}\n          <Label size=\"small\" color={getColorOrTextForGI(result.gi)}>\n            GI: {result.gi}\n          </Label>\n        </div>\n      );\n    };\n    resultRenderer.propTypes = {\n      food: PropTypes.string,\n      gi: PropTypes.number\n    };\n    const searchInput = (\n      <Search\n        id=\"searchBar\"\n        placeholder=\"Food\"\n        loading={this.state.isLoading}\n        onResultSelect={this.handleResultSelect}\n        onSearchChange={this.handleSearchInputChange}\n        results={this.state.results}\n        value={this.state.food}\n        fluid\n        resultRenderer={resultRenderer}\n      />\n    );\n    return searchInput;\n  };\n\n  getServingSizeInput = () => {\n    return (\n      <div style={{ marginTop: 5 }}>\n        <Input\n          style={{ width: 125 }}\n          type=\"number\"\n          min=\"0\"\n          value={this.state.serving}\n          label={\n            <Dropdown\n              style={{\n                borderTopRightRadius: \"50px\",\n                borderBottomRightRadius: \"50px\"\n              }}\n              defaultValue=\"g\"\n              options={[\n                { key: \"g\", text: \"g\", value: \"g\" },\n                { key: \"oz\", text: \"oz\", value: \"oz\" }\n              ]}\n              onChange={this.unitChange}\n            />\n          }\n          labelPosition=\"right\"\n          placeholder=\"Serving Size\"\n          onChange={this.handleServingSizeChange}\n        />\n      </div>\n    );\n  };\n\n  getCarbsResults = (gi, carbsRatio) => {\n    if (!(this.state.food && Number.isInteger(gi))) {\n      return null;\n    }\n\n    return (\n      <div>\n        <Label size=\"large\" horizontal>\n          Carbohydrates{\" \"}\n          <a\n            href=\"https://www.gisymbol.com/carbohydrates/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Icon name=\"help circle\" />\n          </a>\n        </Label>\n        {Math.round(this.state.serving * carbsRatio * 10) / 10} ({\n          this.state.unit\n        })\n      </div>\n    );\n  };\n\n  getGLResult = (carbsRatio, gi) => {\n    if (!(this.state.food && carbsRatio && Number.isInteger(gi))) {\n      return null;\n    }\n\n    const servingFactor = { g: 1, oz: 28.3495231 }[this.state.unit];\n    let gl = (gi * this.state.serving * carbsRatio * servingFactor) / 100;\n    gl = Math.round(gl * 100) / 100; //round 2 decimals\n\n    return (\n      <div style={{ marginTop: 5 }}>\n        <Label size=\"large\" horizontal>\n          Glycemic load{\" \"}\n          <a\n            href=\"https://www.gisymbol.com/what-about-glycemic-load/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Icon name=\"help circle\" />\n          </a>\n        </Label>\n        {gl}{\" \"}\n        <Label color={getColorOrTextForGL(gl)} pointing=\"left\">\n          {getColorOrTextForGL(gl, true)}\n        </Label>\n      </div>\n    );\n  };\n\n  getGIResult = gi => {\n    if (!this.state.food || !Number.isInteger(gi)) {\n      return null;\n    }\n\n    return (\n      <div style={{ marginTop: 5 }}>\n        <Label size=\"large\" horizontal>\n          Glycemic index{\" \"}\n          <a\n            href=\"https://www.gisymbol.com/about-glycemic-index/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Icon name=\"help circle\" />\n          </a>\n        </Label>\n        {gi}{\" \"}\n        <Label color={getColorOrTextForGI(gi)} pointing=\"left\">\n          {getColorOrTextForGI(gi, true)}\n        </Label>\n      </div>\n    );\n  };\n\n  getFooter = () => {\n    return (\n      <div\n        style={{\n          position: \"fixed\",\n          left: 0,\n          bottom: 0,\n          width: \"100%\",\n          backgroundColor: \"#e7e7e7\",\n          color: \"black\",\n          textAlign: \"center\"\n        }}\n      >\n        Made with <span style={{ fontSize: \"large\", color: \"red\" }}>♥</span> by\n        Assaf Morami{\" \"}\n        <a href=\"https://github.com/assafmo\" style={{ color: \"black\" }}>\n          <Icon name=\"github\" />\n        </a>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = \"service-worker.js\";\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}