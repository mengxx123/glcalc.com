{"version":3,"sources":["SearchWorker.js","App.js","registerServiceWorker.js","index.js"],"names":["code","glycemicIndex","foods","self","onmessage","_ref","_ref$data","data","query","setGlycemicIndex","Object","keys","sort","a","b","length","trim","toLowerCase","results","filter","food","includes","map","title","gi","postMessage","slice","concat","more","toString","substring","indexOf","lastIndexOf","blob","Blob","type","workerScript","URL","createObjectURL","module","exports","worker","Worker","getColorOrTextForGI","isText","getColorOrTextForGL","gl","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleServingSizeChange","e","value","setState","serving","unitChange","_ref2","unit","handleResultSelect","_ref3","result","document","getElementById","focus","handleSearchInputChange","_ref4","isLoading","handleSearchDone","_ref5","componentDidMount","getSearchInput","react_default","createElement","Search","id","placeholder","loading","state","onResultSelect","onSearchChange","fluid","resultRenderer","style","color","Label","size","getServingSizeInput","marginTop","Input","width","min","label","Dropdown","borderTopRightRadius","borderBottomRightRadius","defaultValue","options","key","text","onChange","labelPosition","getCarbsResults","carbsRatio","Number","isInteger","horizontal","href","target","rel","Icon","name","Math","round","getGLResult","servingFactor","g","oz","pointing","getGIResult","getFooter","position","left","bottom","backgroundColor","textAlign","fontSize","giValue","carbs_per_100g","margin","Divider","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.414a14de.chunk.js","sourcesContent":["const workercode = () => {\n  let glycemicIndex;\n  let foods;\n\n  //eslint-disable-next-line\n  self.onmessage = ({ data: { query, setGlycemicIndex } }) => {\n    if (setGlycemicIndex) {\n      glycemicIndex = setGlycemicIndex;\n      foods = Object.keys(glycemicIndex).sort((a, b) => a.length - b.length);\n      return;\n    }\n    if (query && glycemicIndex && foods) {\n      query = query.trim().toLowerCase();\n\n      const results = foods\n        .filter(food => food.toLowerCase().includes(query))\n        .map(food => ({ title: food, gi: glycemicIndex[food].gi }));\n\n      const maxResults = 25;\n      if (results.length > maxResults) {\n        //eslint-disable-next-line\n        self.postMessage({\n          results: results.slice(0, maxResults).concat({\n            title: \"Too many results.\",\n            more: results.length - maxResults\n          })\n        });\n      } else {\n        //eslint-disable-next-line\n        self.postMessage({ results });\n      }\n      return;\n    }\n  };\n};\n\nlet code = workercode.toString();\ncode = code.substring(code.indexOf(\"{\") + 1, code.lastIndexOf(\"}\"));\n\nconst blob = new Blob([code], { type: \"application/javascript\" });\nconst workerScript = URL.createObjectURL(blob);\n\nmodule.exports = workerScript;\n","import React, { Component } from \"react\";\nimport {\n  Dropdown,\n  Icon,\n  Input,\n  Label,\n  Divider,\n  Search\n} from \"semantic-ui-react\";\nimport PropTypes from \"prop-types\";\nimport workerScript from \"./SearchWorker.js\";\nimport glycemicIndex from \"./gi.json\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./App.css\";\n\n// const foods = Object.keys(glycemicIndex).sort();\nconst worker = new Worker(workerScript);\nworker.postMessage({ setGlycemicIndex: glycemicIndex });\n\nfunction getColorOrTextForGI(gi, isText) {\n  // Low: 55 or less\n  // Medium: 56 - 69\n  // High: 70 or more\n\n  if (gi <= 55) {\n    return isText ? \"Low\" : \"green\";\n  }\n  if (gi > 55 && gi < 70) {\n    return isText ? \"Medium\" : \"orange\";\n  }\n  if (gi >= 70) {\n    return isText ? \"High\" : \"red\";\n  }\n}\n\nfunction getColorOrTextForGL(gl, isText) {\n  // Low: 10 or less\n  // Medium: 11-19\n  // High: 20 or more\n\n  if (gl <= 10) {\n    return isText ? \"Low\" : \"green\";\n  }\n  if (gl > 10 && gl < 20) {\n    return isText ? \"Medium\" : \"orange\";\n  }\n  if (gl >= 20) {\n    return isText ? \"High\" : \"red\";\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      food: \"\",\n      serving: 100,\n      unit: \"g\",\n      isLoading: false,\n      results: []\n    };\n\n    worker.onmessage = this.handleSearchDone;\n  }\n\n  handleServingSizeChange = (e, { value }) => this.setState({ serving: value });\n\n  unitChange = (e, { value }) => this.setState({ unit: value });\n\n  handleResultSelect = (e, { result }) => {\n    if (result.more) {\n      document.getElementById(\"searchBar\").focus();\n      return;\n    }\n\n    this.setState({ food: result.title });\n\n    worker.postMessage({ query: result.title });\n  };\n\n  handleSearchInputChange = (e, { value }) => {\n    if (!value) {\n      this.setState({ isLoading: false, food: \"\" });\n      return;\n    }\n    this.setState({ isLoading: true, food: value });\n\n    worker.postMessage({ query: value });\n  };\n\n  handleSearchDone = ({ data: { results } }) => {\n    this.setState({\n      isLoading: false,\n      results: results\n    });\n  };\n\n  componentDidMount = () => {\n    document.getElementById(\"searchBar\").focus();\n  };\n\n  render() {\n    let giValue, carbsRatio;\n    if (glycemicIndex[this.state.food]) {\n      giValue = +glycemicIndex[this.state.food].gi;\n      carbsRatio = +glycemicIndex[this.state.food].carbs_per_100g / 100;\n    }\n\n    return (\n      <div style={{ margin: 20 }}>\n        <h1>Glycemic Load Calculator</h1>\n        <Divider />\n        {this.getSearchInput()}\n        {this.getServingSizeInput()}\n        <Divider />\n        {this.getCarbsResults(giValue, carbsRatio)}\n        {this.getGIResult(giValue)}\n        {this.getGLResult(carbsRatio, giValue)}\n        {this.getFooter()}\n      </div>\n    );\n  }\n\n  getSearchInput = () => {\n    const resultRenderer = result => {\n      if (result.more) {\n        return (\n          <b style={{ color: \"red\" }}>\n            {result.more} more results. Please refine your search.\n          </b>\n        );\n      }\n      return (\n        <div>\n          <b>{result.title}</b>{\" \"}\n          <Label size=\"small\" color={getColorOrTextForGI(result.gi)}>\n            GI: {result.gi}\n          </Label>\n        </div>\n      );\n    };\n    resultRenderer.propTypes = {\n      food: PropTypes.string,\n      gi: PropTypes.number\n    };\n    const searchInput = (\n      <Search\n        id=\"searchBar\"\n        placeholder=\"Food\"\n        loading={this.state.isLoading}\n        onResultSelect={this.handleResultSelect}\n        onSearchChange={this.handleSearchInputChange}\n        results={this.state.results}\n        value={this.state.food}\n        fluid\n        resultRenderer={resultRenderer}\n      />\n    );\n    return searchInput;\n  };\n\n  getServingSizeInput = () => {\n    return (\n      <div style={{ marginTop: 5 }}>\n        <Input\n          style={{ width: 125 }}\n          type=\"number\"\n          min=\"0\"\n          value={this.state.serving}\n          label={\n            <Dropdown\n              style={{\n                borderTopRightRadius: \"50px\",\n                borderBottomRightRadius: \"50px\"\n              }}\n              defaultValue=\"g\"\n              options={[\n                { key: \"g\", text: \"g\", value: \"g\" },\n                { key: \"oz\", text: \"oz\", value: \"oz\" }\n              ]}\n              onChange={this.unitChange}\n            />\n          }\n          labelPosition=\"right\"\n          placeholder=\"Serving Size\"\n          onChange={this.handleServingSizeChange}\n        />\n      </div>\n    );\n  };\n\n  getCarbsResults = (gi, carbsRatio) => {\n    if (!(this.state.food && Number.isInteger(gi))) {\n      return null;\n    }\n\n    return (\n      <div>\n        <Label size=\"large\" horizontal>\n          Carbohydrates{\" \"}\n          <a\n            href=\"https://www.gisymbol.com/carbohydrates/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Icon name=\"help circle\" />\n          </a>\n        </Label>\n        {Math.round(this.state.serving * carbsRatio * 10) / 10} ({\n          this.state.unit\n        })\n      </div>\n    );\n  };\n\n  getGLResult = (carbsRatio, gi) => {\n    if (!(this.state.food && carbsRatio && Number.isInteger(gi))) {\n      return null;\n    }\n\n    const servingFactor = { g: 1, oz: 28.3495231 }[this.state.unit];\n    let gl = (gi * this.state.serving * carbsRatio * servingFactor) / 100;\n    gl = Math.round(gl * 100) / 100; //round 2 decimals\n\n    return (\n      <div style={{ marginTop: 5 }}>\n        <Label size=\"large\" horizontal>\n          Glycemic load{\" \"}\n          <a\n            href=\"https://www.gisymbol.com/what-about-glycemic-load/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Icon name=\"help circle\" />\n          </a>\n        </Label>\n        {gl}{\" \"}\n        <Label color={getColorOrTextForGL(gl)} pointing=\"left\">\n          {getColorOrTextForGL(gl, true)}\n        </Label>\n      </div>\n    );\n  };\n\n  getGIResult = gi => {\n    if (!this.state.food || !Number.isInteger(gi)) {\n      return null;\n    }\n\n    return (\n      <div style={{ marginTop: 5 }}>\n        <Label size=\"large\" horizontal>\n          Glycemic index{\" \"}\n          <a\n            href=\"https://www.gisymbol.com/about-glycemic-index/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <Icon name=\"help circle\" />\n          </a>\n        </Label>\n        {gi}{\" \"}\n        <Label color={getColorOrTextForGI(gi)} pointing=\"left\">\n          {getColorOrTextForGI(gi, true)}\n        </Label>\n      </div>\n    );\n  };\n\n  getFooter = () => {\n    return (\n      <div\n        style={{\n          position: \"fixed\",\n          left: 0,\n          bottom: 0,\n          width: \"100%\",\n          backgroundColor: \"#e7e7e7\",\n          color: \"black\",\n          textAlign: \"center\"\n        }}\n      >\n        Made with <span style={{ fontSize: \"large\", color: \"red\" }}>♥</span> by\n        Assaf Morami{\" \"}\n        <a href=\"https://github.com/assafmo\" style={{ color: \"black\" }}>\n          <Icon name=\"github\" />\n        </a>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = \"service-worker.js\";\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}